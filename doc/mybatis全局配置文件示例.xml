<?xml version="1.0" encoding="UTF-8" ?>
<!-- mybatis 全局配置文件。注：该文件只做解释说明，没有在本项目的任何地方使用 -->
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 1、properties(属性)：都是可外部配置且可动态替换的，既可以在典型的Java属性文件中配置，亦可通过properties元素的子元素来传递。 -->
    <!-- properties：引入外部配置文件。resource：引入类路径下的全局配置文件。url：引入网络路径或者磁盘路径下的资源文件 -->
    <properties resource="org/mybatis/example/config.properties">
        <property name="username" value="dev_username"/>
        <property name="password" value="dev_password"/>
    </properties>

    <!-- 2、settings(设置)：这是MyBatis中极为重要的调整设置，它们会改变MyBatis 的运行时行为。 -->
    <settings>
        <!-- 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。默认true -->
        <setting name="cacheEnabled" value="true"/>
        <!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。默认false -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 当开启时，任何方法的调用都会加载该对象的所有属性，否则每个属性会按需加载(参考lazyLoadTriggerMethods)。在3.4.1及之前的版本默认值为true，之后版本为false -->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!-- 是否允许单一语句返回多结果集(需要驱动支持)。默认true -->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!-- 使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认true -->
        <setting name="useColumnLabel" value="true"/>
        <!-- 允许JDBC支持自动生成主键，需要驱动支持。如果设置为true则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作(如：Derby)。默认false -->
        <setting name="useGeneratedKeys" value="false"/>
        <!-- 指定MyBatis应如何自动映射列到字段或属性。NONE表示取消自动映射；PARTIAL只会自动映射没有定义嵌套结果集映射的结果集。FULL会自动映射任意复杂的结果集(无论是否嵌套)。可选值NONE、PARTIAL、FULL。默认PARTIAL -->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--
        指定发现自动映射目标未知列(或者未知属性类型)的行为。可选值NONE、WARNING、FAILING。默认NONE。
        NONE：不做任何反应
        WARNING：输出提醒日志('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior'的日志等级必须设置为WARN)
        FAILING：映射失败(抛出SqlSessionException)
        -->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!-- 配置默认的执行器。SIMPLE：普通执行器，REUSE：会重用预处理语句(Prepared Statements)，BATCH：将重用语句并执行批量更新。默认值SIMPLE -->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!-- 设置超时时间，它决定驱动等待数据库响应的秒数。 -->
        <setting name="defaultStatementTimeout" value="25"/>
        <!-- 为驱动的结果集获取数量(fetchSize)设置一个提示值。此参数只可以在查询设置中被覆盖。 -->
        <setting name="defaultFetchSize" value="100"/>
        <!-- 允许在嵌套语句中使用分页(RowBounds)。如果允许使用则设置为false。默认false -->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!-- 允许在嵌套语句中使用分页(ResultHandler)。如果允许使用则设置为false。默认true -->
        <setting name="safeResultHandlerEnabled" value="true"/>
        <!-- 是否开启自动驼峰命名规则(camel case)映射，即从经典数据库列名A_COLUMN到经典Java属性名aColumn的类似映射。默认false -->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!-- MyBatis利用本地缓存机制(Local Cache)防止循环引用(circular references)和加速重复嵌套查询。默认值为SESSION，这种情况下会缓存一个会话中执行的所有查询。若设置值为STATEMENT，本地会话仅用在语句执行上，对相同SqlSession的不同调用将不会共享数据。 -->
        <setting name="localCacheScope" value="SESSION"/>
        <!-- 当没有为参数提供特定的JDBC类型时，为空值指定JDBC类型。某些驱动需要指定列的JDBC类型，多数情况直接用一般类型即可，如：NULL、VARCHAR或OTHER。 -->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!-- 指定哪个对象的方法触发一次延迟加载。有效值：为用逗号分隔的方法列表。 -->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!-- 指定动态SQL生成的默认语言。有效值为：一个类型别名或完全限定类名。 -->
        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>
        <!-- (新增于3.4.5)指定Enum使用的默认TypeHandler。有效值为：一个类型别名或完全限定类名。 -->
        <setting name="defaultEnumTypeHandler" value="org.apache.ibatis.type.EnumTypeHandler"/>
        <!-- 指定当结果集中值为null的时候是否调用映射对象的setter(map对象时为put)方法，这在依赖于Map.keySet()或null值初始化的时候比较有用。注意基本类型(int、boolean 等)是不能设置成null的。-->
        <setting name="callSettersOnNulls" value="false"/>
        <!-- (新增于3.4.2)当返回行的所有列都是空时，MyBatis默认返回null。当开启这个设置时，MyBatis会返回一个空实例。请注意，它也适用于嵌套的结果集(如集合或关联)。 -->
        <setting name="returnInstanceForEmptyRow" value="false"/>
        <!-- 指定MyBatis增加到日志名称的前缀。有效值为：人任何字符串 -->
        <setting name="logPrefix" value=""/>
        <!-- 指定MyBatis所用日志的具体实现，未指定时将自动查找。有效值为：SLF4J、LOG4J、LOG4J2、JDK_LOGGING、COMMONS_LOGGING、STDOUT_LOGGING、NO_LOGGING -->
        <setting name="logImpl" value=""/>
        <!-- 指定Mybatis创建具有延迟加载能力的对象所用到的代理工具。有效值为：CGLIB、JAVASSIST。3.3版本以上默认值为JAVASSIST-->
        <setting name="proxyFactory" value="JAVASSIST"/>
        <!-- 指定VFS的实现。有效值为：自定义VFS的实现的类全限定名，以逗号分隔。 -->
        <setting name="vfsImpl" value=""/>
        <!-- (新增于3.4.1)允许使用方法签名中的名称作为语句参数名称。为了使用该特性，你的项目必须采用Java 8编译，并且加上-parameters选项。 -->
        <setting name="useActualParamName" value="true"/>
        <!-- (新增于3.2.3)指定一个提供Configuration实例的类。这个被返回的Configuration实例用来加载被反序列化对象的延迟加载属性值。这个类必须包含一个签名为static Configuration getConfiguration()的方法。有效值为：类型别名或者全类名 -->
        <setting name="configurationFactory" value=""/>
        <!-- (新增于3.5.2)Specifies a scroll strategy when omit it per statement settings。-->
        <setting name="defaultResultSetType" value=""/>
    </settings>

    <!-- 3、typeAliases(类型别名)：为Java类型设置一个短的名字。它只和XML配置有关，存在的意义仅在于用来减少类完全限定名的冗余。也可在对应实体类上使用注解@Alias("author") -->
    <typeAliases>
        <!-- 方式一：每个实体类配置一次 -->
        <typeAlias alias="Author" type="domain.blog.Author"/>
        <typeAlias alias="Blog" type="domain.blog.Blog"/>
        <typeAlias alias="Comment" type="domain.blog.Comment"/>
        <typeAlias alias="Post" type="domain.blog.Post"/>
        <typeAlias alias="Section" type="domain.blog.Section"/>
        <typeAlias alias="Tag" type="domain.blog.Tag"/>
        <!-- 方式二：使用实体类所在的包路径统一配置 -->
        <package name="domain.blog"/>
        <!-- 方式三：在对应实体类上使用注解，如：@Alias("author") -->
    </typeAliases>

    <!-- 4、typeHandlers(类型处理器)：无论是MyBatis在预处理语句(PreparedStatement)中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java类型。从3.4.5开始，MyBatis默认支持JSR-310(日期和时间API)。 -->
    <!-- 如果Mybatis版本低于3.4.0，还需加入如下配置，否则不支持LocalDate、LocalDateTime等日期类作为映射 -->
    <typeHandlers>
        <!-- 方式一：handler 属性直接配置我们要指定的 TypeHandler -->
        <typeHandler handler="org.apache.ibatis.type.InstantTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.LocalDateTimeTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.LocalDateTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.LocalTimeTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.OffsetDateTimeTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.OffsetTimeTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.ZonedDateTimeTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.YearTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.MonthTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.YearMonthTypeHandler"/>
        <typeHandler handler="org.apache.ibatis.type.JapaneseDateTypeHandler"/>
        <!-- 注：由于自定义的 TypeHandler 在定义时已经通过注解指定了 jdbcType，故此处不用再配置 jdbcType 属性了 -->
        <typeHandler handler="com.study.test.HobbyTypeHandler"/>
        <!-- 方式二：使用 javaType 属性指定 java 类型，如String。如果指定了 javaType，那么指定的 typeHandler 就只能作用于指定的 Java 类型 -->
        <typeHandler javaType="" handler=""/>
        <!-- 方式三：使用 jdbcType 属性指定数据库基本数据类型，如varchar。如果指定了 jdbcType，那么指定的 typeHandler 就只作用于指定的 Jdbc 类型 -->
        <typeHandler jdbcType="" handler=""/>
        <!-- 方式四：也可 javaType 属性和 jdbcType 属性同时使用 -->
        <typeHandler javaType="" jdbcType="" handler=""/>
        <!-- 方式五：当配置 package 的时候，mybatis 会去指定的 package 扫描 TypeHandler -->
        <package name="org.apache.ibatis.type"/>
    </typeHandlers>

    <!-- 5、对象工厂(objectFactory)：MyBatis每次创建结果对象的新实例时，它都会使用一个对象工厂(ObjectFactory)实例来完成。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。 -->
    <objectFactory type=""></objectFactory>

    <!-- 6、插件(plugins)：MyBatis允许你在已映射语句执行过程中的某一点进行拦截调用。 -->
    <!-- 默认情况下，MyBatis允许使用插件来拦截的方法调用包括：
    Executor(update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
    ParameterHandler(getParameterObject, setParameters)
    ResultSetHandler(handleResultSets, handleOutputParameters)
    StatementHandler(prepare, parameterize, batch, update, query)
    -->
    <plugins>
        <plugin interceptor=""></plugin>
    </plugins>

    <!-- 7、环境配置(environments)：MyBatis可以配置成适应多种环境，这种机制有助于将SQL映射应用于多种数据库之中，现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同Schema的多个生产数据库中使用相同的SQL映射。有许多类似的使用场景。 -->
    <!-- 记住：尽管可以配置多个环境，但每个SqlSessionFactory实例只能选择一种环境。即：每个数据库对应一个SqlSessionFactory实例。如果忽略了环境参数，那么默认环境将会被加载。 -->
    <environments default="development">
        <!-- 环境唯一标识 -->
        <environment id="development">
            <!-- 事务管理器(transactionManager)：在 MyBatis 中有两种类型的事务管理器，即JDBC和MANAGED。如果你正在使用Spring + MyBatis，则没有必要配置事务管理器，因为Spring模块会使用自带的管理器来覆盖前面的配置。 -->
            <!--JDBC：这个配置就是直接使用了JDBC的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。
            MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期(比如JEE应用服务器的上下文)。默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将closeConnection属性设置为false来阻止它默认的关闭行为。 -->
            <transactionManager type="JDBC"/>
            <!-- 数据源(dataSource)：dataSource元素使用标准的JDBC数据源接口来配置JDBC连接对象的资源。有三种内建的数据源类型：UNPOOLED、POOLED、JNDI -->
            <!--
            UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接。虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说是一个很好的选择。不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。
            POOLED：这种数据源的实现利用“池”的概念将JDBC连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。这是一种使得并发Web应用快速响应请求的流行处理方式。
            JNDI：这个数据源的实现是为了能在如EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用。
            -->
            <!--
            如下的username和password将会由properties元素中设置的相应值来替换。driver和url属性将会由config.properties文件中对应的值来替换，这样就为配置提供了诸多灵活选择。
            属性也可以被传递到SqlSessionFactoryBuilder.build()方法中。如：SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);
            或SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);
            -->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 8、databaseIdProvider(数据库厂商标识)：多数据库支持 -->
    <!-- MyBatis可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的databaseId属性。MyBatis会加载不带databaseId属性和带有匹配当前数据库databaseId属性的所有语句。如果同时找到带有databaseId和不带databaseId的相同语句，则后者会被舍弃。 -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"></property>
        <property name="Oracle" value="oracle"></property>
        <property name="SQL Server" value="sql server"></property>
    </databaseIdProvider>

    <!-- 9、mappers(映射器)：告诉MyBatis到哪里去找映射文件。你可以使用相对于类路径的资源引用、完全限定资源定位符(包括file:///的URL)、类名、包名等。 -->
    <mappers>
        <!-- 每一个 mapper 标签中配置的都是一个独立的映射配置文件的路径，但所有的配置都要保证 xml 中 namespace 属性值和对应的接口名相同。配置方式有以下几种 -->
        <!-- 方式一：相对路径进行配置，使用相对于类路径的资源引用。注：这种方式不用保证 xml 文件和接口文件同包同名，但要保证 xml 中 namespace 属性值和对应的接口名相同。 -->
        <mapper resource="org/mybatis/builder/AuthorMapper.xml"/>
        <!-- 方式二：绝对路径进行配置，使用完全限定资源定位符。 -->
        <mapper url="file:///var/mappers/AuthorMapper.xml"/>
        <!-- 方式三：接口信息进行配置，使用映射器接口实现类的完全限定类名。注：这种方式必须保证 xml 文件和接口文件同包同名，因为是通过获取 mapper 中的 class 属性拼接上 .xml 来读取 xml 文件的，如果 xml 文件和对应接口文件不同或者不在同一个包中是无法读取到 xml 的。 -->
        <mapper class="org.mybatis.builder.AuthorMapper"/>
        <!-- 方式四：接口所在包进行配置，将包内的映射器接口实现全部注册为映射器。注：这种方式也必须保证 xml 文件和接口文件同包同名 -->
        <package name="org.mybatis.builder"/>
    </mappers>
</configuration>
